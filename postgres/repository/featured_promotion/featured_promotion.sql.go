// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: featured_promotion.sql

package featured_promotion

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getFeaturedPromotions = `-- name: GetFeaturedPromotions :many
SELECT fp.id, fp.title, fp.image_url, fp.type, fp.target_id, fp.filter_params, fp.start_date, fp.end_date, fp.display_order,
       CAST(
           CASE
               WHEN fp.type = 'collection' THEN c.name
               WHEN fp.type = 'category' THEN cat.category
               END AS TEXT
       ) AS target_name,
       CAST(
           CASE
               WHEN fp.type = 'collection' THEN c.handle
               WHEN fp.type = 'category' THEN cat.handle
               END AS TEXT
       ) AS target_handle
FROM featured_promotions fp
         LEFT JOIN collections c ON fp.type = 'collection' AND fp.target_id = c.id
         LEFT JOIN categories cat ON fp.type = 'category' AND fp.target_id = cat.id
WHERE (fp.end_date IS NULL OR fp.end_date >= CURRENT_DATE)
  AND (fp.start_date IS NULL OR fp.start_date <= CURRENT_DATE)
ORDER BY fp.display_order, fp.id
LIMIT $1
`

type GetFeaturedPromotionsRow struct {
	ID           int64
	Title        string
	ImageUrl     string
	Type         string
	TargetID     *int32
	FilterParams []byte
	StartDate    pgtype.Date
	EndDate      pgtype.Date
	DisplayOrder *int32
	TargetName   string
	TargetHandle string
}

func (q *Queries) GetFeaturedPromotions(ctx context.Context, limit int32) ([]*GetFeaturedPromotionsRow, error) {
	rows, err := q.db.Query(ctx, getFeaturedPromotions, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetFeaturedPromotionsRow
	for rows.Next() {
		var i GetFeaturedPromotionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ImageUrl,
			&i.Type,
			&i.TargetID,
			&i.FilterParams,
			&i.StartDate,
			&i.EndDate,
			&i.DisplayOrder,
			&i.TargetName,
			&i.TargetHandle,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
