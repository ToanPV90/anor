// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cart.sql

package cart

import (
	"context"

	"github.com/shopspring/decimal"
)

const addCartItem = `-- name: AddCartItem :one
INSERT INTO cart_items (
    cart_id, variant_id, qty, price, currency_code, thumbnail, product_name, product_path, variant_attributes
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, cart_id, variant_id, qty, price, thumbnail, product_name, variant_attributes, is_removed, created_at, updated_at, currency_code, product_path
`

func (q *Queries) AddCartItem(ctx context.Context, cartID int64, variantID int64, qty int32, price decimal.Decimal, currencyCode string, thumbnail string, productName string, productPath string, variantAttributes []byte) (*CartItem, error) {
	row := q.db.QueryRow(ctx, addCartItem,
		cartID,
		variantID,
		qty,
		price,
		currencyCode,
		thumbnail,
		productName,
		productPath,
		variantAttributes,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.VariantID,
		&i.Qty,
		&i.Price,
		&i.Thumbnail,
		&i.ProductName,
		&i.VariantAttributes,
		&i.IsRemoved,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CurrencyCode,
		&i.ProductPath,
	)
	return &i, err
}

const cartItemExistsByCartID = `-- name: CartItemExistsByCartID :one
SELECT EXISTS(
    SELECT 1 FROM cart_items
    WHERE id = $1 AND cart_id = $2
)
`

func (q *Queries) CartItemExistsByCartID(ctx context.Context, iD int64, cartID int64) (bool, error) {
	row := q.db.QueryRow(ctx, cartItemExistsByCartID, iD, cartID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const cartItemExistsByUserID = `-- name: CartItemExistsByUserID :one
SELECT EXISTS(
    SELECT 1 FROM cart_items ci
    LEFT JOIN carts c on ci.cart_id = c.id
    LEFT JOIN users u on u.id = c.user_id
    WHERE ci.id = $1 AND u.id = $2
)
`

func (q *Queries) CartItemExistsByUserID(ctx context.Context, iD int64, iD_2 int64) (bool, error) {
	row := q.db.QueryRow(ctx, cartItemExistsByUserID, iD, iD_2)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countCartItems = `-- name: CountCartItems :one
SELECT COUNT(ci.*) FROM cart_items ci
LEFT JOIN carts c on c.id = ci.cart_id
WHERE user_id = $1 AND status = 'Active'
`

func (q *Queries) CountCartItems(ctx context.Context, userID *int64) (int64, error) {
	row := q.db.QueryRow(ctx, countCartItems, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countCartItemsByCartID = `-- name: CountCartItemsByCartID :one
SELECT COUNT(*) FROM cart_items
WHERE cart_id = $1 AND is_removed = false
`

func (q *Queries) CountCartItemsByCartID(ctx context.Context, cartID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countCartItemsByCartID, cartID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCart = `-- name: CreateCart :one
INSERT INTO carts (
    user_id
) VALUES (
    $1
) RETURNING id, user_id, status, created_at, deleted_at, pi_client_secret
`

func (q *Queries) CreateCart(ctx context.Context, userID *int64) (*Cart, error) {
	row := q.db.QueryRow(ctx, createCart, userID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.PiClientSecret,
	)
	return &i, err
}

const createGuestCart = `-- name: CreateGuestCart :one
INSERT INTO carts DEFAULT VALUES RETURNING id, user_id, status, created_at, deleted_at, pi_client_secret
`

func (q *Queries) CreateGuestCart(ctx context.Context) (*Cart, error) {
	row := q.db.QueryRow(ctx, createGuestCart)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.PiClientSecret,
	)
	return &i, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM cart_items
WHERE id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCartItem, id)
	return err
}

const getCartByID = `-- name: GetCartByID :one
SELECT id, user_id, status, created_at, deleted_at, pi_client_secret FROM carts WHERE id = $1
`

func (q *Queries) GetCartByID(ctx context.Context, id int64) (*Cart, error) {
	row := q.db.QueryRow(ctx, getCartByID, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.PiClientSecret,
	)
	return &i, err
}

const getCartByUserID = `-- name: GetCartByUserID :one
SELECT id, user_id, status, created_at, deleted_at, pi_client_secret FROM carts
WHERE user_id = $1 AND status = 'Active'
`

func (q *Queries) GetCartByUserID(ctx context.Context, userID *int64) (*Cart, error) {
	row := q.db.QueryRow(ctx, getCartByUserID, userID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.PiClientSecret,
	)
	return &i, err
}

const getCartItemsByCartID = `-- name: GetCartItemsByCartID :many
SELECT id, cart_id, variant_id, qty, price, thumbnail, product_name, variant_attributes, is_removed, created_at, updated_at, currency_code, product_path FROM cart_items
WHERE is_removed IS FALSE AND cart_id = $1
`

func (q *Queries) GetCartItemsByCartID(ctx context.Context, cartID int64) ([]*CartItem, error) {
	rows, err := q.db.Query(ctx, getCartItemsByCartID, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*CartItem
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.CartID,
			&i.VariantID,
			&i.Qty,
			&i.Price,
			&i.Thumbnail,
			&i.ProductName,
			&i.VariantAttributes,
			&i.IsRemoved,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CurrencyCode,
			&i.ProductPath,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartItemsByUserID = `-- name: GetCartItemsByUserID :many
SELECT ci.id, ci.cart_id, ci.variant_id, ci.qty, ci.price, ci.thumbnail, ci.product_name, ci.variant_attributes, ci.is_removed, ci.created_at, ci.updated_at, ci.currency_code, ci.product_path FROM cart_items ci
LEFT JOIN carts c ON ci.cart_id = c.id
WHERE  ci.is_removed IS FALSE AND c.user_id = $1
`

func (q *Queries) GetCartItemsByUserID(ctx context.Context, userID *int64) ([]*CartItem, error) {
	rows, err := q.db.Query(ctx, getCartItemsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*CartItem
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.CartID,
			&i.VariantID,
			&i.Qty,
			&i.Price,
			&i.Thumbnail,
			&i.ProductName,
			&i.VariantAttributes,
			&i.IsRemoved,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CurrencyCode,
			&i.ProductPath,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementCartItemQty = `-- name: IncrementCartItemQty :one
UPDATE cart_items
SET qty = qty + $3,
    updated_at = NOW()
WHERE cart_id = $1 AND variant_id = $2
RETURNING id, cart_id, variant_id, qty, price, thumbnail, product_name, variant_attributes, is_removed, created_at, updated_at, currency_code, product_path
`

func (q *Queries) IncrementCartItemQty(ctx context.Context, cartID int64, variantID int64, qty int32) (*CartItem, error) {
	row := q.db.QueryRow(ctx, incrementCartItemQty, cartID, variantID, qty)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.VariantID,
		&i.Qty,
		&i.Price,
		&i.Thumbnail,
		&i.ProductName,
		&i.VariantAttributes,
		&i.IsRemoved,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CurrencyCode,
		&i.ProductPath,
	)
	return &i, err
}

const updateCartClientSecret = `-- name: UpdateCartClientSecret :exec
UPDATE carts
SET pi_client_secret = $3
WHERE id = $1 AND user_id = $2
`

func (q *Queries) UpdateCartClientSecret(ctx context.Context, iD int64, userID *int64, piClientSecret *string) error {
	_, err := q.db.Exec(ctx, updateCartClientSecret, iD, userID, piClientSecret)
	return err
}

const updateCartItemQty = `-- name: UpdateCartItemQty :exec
UPDATE cart_items
SET qty = $2,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateCartItemQty(ctx context.Context, iD int64, qty int32) error {
	_, err := q.db.Exec(ctx, updateCartItemQty, iD, qty)
	return err
}
