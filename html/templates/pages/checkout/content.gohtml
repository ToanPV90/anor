{{ define "content" }}
    {{- /*gotype: github.com/aliml92/anor/html/dtos/pages/checkout.Content*/ -}}
    <div class="container">
        <div class="row">
            <main class="col-xl-8 col-lg-8">

                <!-- ============== COMPONENT CHECKOUT =============== -->
                <article class="card border-0">
                    <div class="card-body">
                        <h4 class="card-title">Delivery Option</h4>
                        <hr/>
                        <div class="form-check col-md-6 mt-3 mb-5 ms-3">
                            <input class="form-check-input" type="radio" name="flexRadioDefault" id="delivery" checked style="transform: scale(1.4);">
                            <label class="form-check-label" for="delivery">
                                <span class="text-dark fw-bold ms-2"> Wed, 05/06 - Fri, 07/06</span>
                                <br>
                                <span class="ms-2" style="color: #66676e;font-size: 0.9em;">Standard delivery</span>
                                <br>
                                <span class="text-dark fw-bold ms-2" style="font-size: 0.9em;">Free</span>
                            </label>
                        </div>

                        <h4 class="card-title">Order</h4>
                        <hr/>

                        {{ range $index, $item := .Cart.CartItems }}
                            <div class="col-lg-9">
                                <figure class="d-flex align-items-start mt-2">
                                    <div class="me-3 flex-shrink-0">
                                        <img src="{{ modifyImgURL $item.Thumbnail 100 }}" class="cart-item-thumb img-thumbnail">
                                    </div>
                                    <figcaption class="info">
                                        <p class="title" >{{ $item.ProductName }}</p>
                                        {{ range $attr, $attrVal := $item.VariantAttributes }}
                                            <p class="my-1" >{{ $attr }}: {{ $attrVal }}</p>
                                        {{ end }}
                                        <p class="text-dark fw-bold">${{ $item.Price }}</p>
                                    </figcaption>
                                </figure>
                            </div>
                        {{ end }}

                    </div> <!-- card-body end.// -->
                </article> <!-- card end.// -->
                <!-- ============== COMPONENT CHECKOUT .// =============== -->

            </main> <!-- col.// -->
            <aside class="col-xl-4 col-lg-4">
                <article class="ms-lg-4 mt-4 mt-lg-0">
                    <h4 class="card-title mb-3" style="padding-top: 20px">Payment Method</h4>
                    <hr/>
                    <form id="payment-form">
                        <div id="payment-element">
                            <!--Stripe.js injects the Payment Element-->
                        </div>
                        <button id="submit" class="stripe-payment-btn">
                            <div class="spinner hidden" id="spinner"></div>
                            <span id="button-text">Pay now</span>
                        </button>
                        <div id="payment-message" class="hidden"></div>
                    </form>
                </article>
                <!-- ============== COMPONENT SUMMARY =============== -->
                <article class="ms-lg-4 mt-4 mt-lg-0">
                    <h5 class="mb-3">Summary</h5>
                    <dl class="row">

                        <dt class="col-7 fw-normal">Shipping:</dt>
                        <dd class="col-5 text-end">+ $0</dd>
                    </dl>
                    <hr>
                    <dl class="row">
                        <dt class="col-7 fw-normal">Total:</dt>
                        <dd class="col-5 h5 text-end"> ${{ .Cart.TotalAmount }} </dd>
                    </dl>
                </article>
                <!-- ============== COMPONENT SUMMARY .// =============== -->
            </aside> <!-- col.// -->
        </div> <!-- row.// -->

        <br><br>

    </div> <!-- container .//  -->
    <!-- ============== SECTION END// ============== -->
    <script>
      // This is your test publishable API key.
      var stripe = Stripe("pk_test_51PJ8DELIUpPV6l704ECPzfJLVqoXeLHB9KpDY6unemwpPmSxVblLM4DIVMOqrjooHRhUF85jlV0vaA13rDwvw8FA00BtbRJ3OY");

      var elements;

      window.addEventListener('htmx:historyRestore', (evt) => {
        if (window.location.pathname.includes("/checkout")) {
          initialize();
          checkStatus();
        }
      });

      window.addEventListener('DOMContentLoaded', (evt) => {
        if (window.location.pathname.includes("/checkout")) {
          initialize();
          checkStatus();
          console.log("initialized by DOMContentLoaded")
        }
      });

      document.body.addEventListener("htmx:afterSettle", (evt) => {
        if (window.location.pathname.includes("/checkout")) {
          initialize();
          checkStatus();
        }
      });

      document
        .querySelector("#payment-form")
        .addEventListener("submit", handleSubmit);

      // Fetches a payment intent and captures the client secret
      async function initialize() {
        const response = await fetch("/checkout/get-pi-client-secret", {
          method: "POST",
        });
        const { clientSecret } = await response.json();

        console.log("client secret: ", clientSecret);

        const appearance = {
          theme: 'stripe',
        };
        elements = stripe.elements({ appearance, clientSecret });

        const paymentElementOptions = {
          layout: "tabs",
        };

        const paymentElement = elements.create("payment", paymentElementOptions);
        console.log("paymentElement: ", paymentElement)
        paymentElement.mount("#payment-element");
      }

      async function handleSubmit(e) {
        e.preventDefault();
        setLoading(true);

        const { error } = await stripe.confirmPayment({
          elements,
          confirmParams: {
            // Make sure to change this to your payment completion page
            return_url: "http://localhost:8008/checkout/redirect",
          },
        });

        // This point will only be reached if there is an immediate error when
        // confirming the payment. Otherwise, your customer will be redirected to
        // your `return_url`. For some payment methods like iDEAL, your customer will
        // be redirected to an intermediate site first to authorize the payment, then
        // redirected to the `return_url`.
        console.log("error: ", error)
        if (error.type === "card_error" || error.type === "validation_error") {
          showMessage(error.message);
        } else {
          showMessage("An unexpected error occurred.");
        }

        setLoading(false);
      }

      // Fetches the payment intent status after payment submission
      async function checkStatus() {
        const clientSecret = new URLSearchParams(window.location.search).get(
          "payment_intent_client_secret"
        );

        if (!clientSecret) {
          return;
        }

        const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);

        switch (paymentIntent.status) {
          case "succeeded":
            showMessage("Payment succeeded!");
            break;
          case "processing":
            showMessage("Your payment is processing.");
            break;
          case "requires_payment_method":
            showMessage("Your payment was not successful, please try again.");
            break;
          default:
            showMessage("Something went wrong.");
            break;
        }
      }

      // ------- UI helpers -------

      function showMessage(messageText) {
        const messageContainer = document.querySelector("#payment-message");

        messageContainer.classList.remove("hidden");
        messageContainer.textContent = messageText;

        setTimeout(function () {
          messageContainer.classList.add("hidden");
          messageContainer.textContent = "";
        }, 4000);
      }

      // Show a spinner on payment submission
      function setLoading(isLoading) {
        if (isLoading) {
          // Disable the button and show a spinner
          document.querySelector("#submit").disabled = true;
          document.querySelector("#spinner").classList.remove("hidden");
          document.querySelector("#button-text").classList.add("hidden");
        } else {
          document.querySelector("#submit").disabled = false;
          document.querySelector("#spinner").classList.add("hidden");
          document.querySelector("#button-text").classList.remove("hidden");
        }
      }

    </script>
{{ end }}