{{ define "base" }}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="Anor Market sells huge variety of products" />
    <meta name="author" content="Alisher Muzaffarov" />

    <title>{{template "title" . }}</title>

    <!-- Bootstrap css -->
    <link href="static/css/bootstrap.css" rel="stylesheet" type="text/css" />

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet">

    <!-- Font awesome 5 -->
    <link href="static/fonts/fontawesome/css/all.min.css" type="text/css" rel="stylesheet" />

    <!-- autoComplete.css -->
{{/*    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@10.2.7/dist/css/autoComplete.min.css">*/}}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

    <!-- Custom css -->
    <link href="static/css/ui.css" rel="stylesheet" type="text/css" />
    <link href="static/css/responsive.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.3/dist/css/themes/splide-skyblue.min.css"/>
    
    <!-- htmx scripts -->
    <script src="https://unpkg.com/htmx.org@1.9.10"
            integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC"
            crossorigin="anonymous"></script>

    <script src="https://unpkg.com/htmx.org/dist/ext/response-targets.js"></script>
    <script src="https://unpkg.com/hyperscript.org@0.9.12"></script>
</head>

<body hx-ext="response-targets">
    <header class="section-header">
        {{ template "header" . }}
    </header>

    <div id="main">
        {{ template "main" . }}
    </div>

    <footer class="section-footer footer-dark bg-dark">
        <div class="container">
            <section class="footer-main padding-y">
                <div class="row">
                    <aside class="col-12 col-sm-12 col-lg-4">
                        <article class="me-lg-5">
                            <img src="static/images/logo-white.png" height="44" class="logo-footer" />
                            <p class="mt-3 text-white-50">
                                here is some information about our company,
                                We work since 1990 and still growing. This
                                is just good html template
                            </p>
                            <nav class="mb-4 mb-lg-0">
                                <a class="btn btn-icon btn-primary" title="Facebook" target="_blank" href="#"><i
                                        class="fab fa-facebook-f"></i></a>
                                <a class="btn btn-icon btn-primary" title="Instagram" target="_blank" href="#"><i
                                        class="fab fa-instagram"></i></a>
                                <a class="btn btn-icon btn-primary" title="Youtube" target="_blank" href="#"><i
                                        class="fab fa-youtube"></i></a>
                                <a class="btn btn-icon btn-primary" title="Twitter" target="_blank" href="#"><i
                                        class="fab fa-twitter"></i></a>
                            </nav>
                        </article>
                    </aside>
                    <aside class="col-6 col-sm-4 col-lg-2">
                        <h6 class="title">Store</h6>
                        <ul class="list-menu mb-4">
                            <li><a href="#">About us</a></li>
                            <li><a href="#">Find store</a></li>
                            <li><a href="#">Categories</a></li>
                            <li><a href="#">Blogs</a></li>
                        </ul>
                    </aside>
                    <aside class="col-6 col-sm-4 col-lg-2">
                        <h6 class="title">Information</h6>
                        <ul class="list-menu mb-4">
                            <li><a href="#">Help center</a></li>
                            <li><a href="#">Money refund</a></li>
                            <li><a href="#">Shipping info</a></li>
                            <li><a href="#">Refunds</a></li>
                        </ul>
                    </aside>
                    <aside class="col-6 col-sm-4 col-lg-2">
                        <h6 class="title">Support</h6>
                        <ul class="list-menu mb-4">
                            <li><a href="#"> Help center </a></li>
                            <li><a href="#"> Documents </a></li>
                            <li><a href="#"> Account restore </a></li>
                            <li><a href="#"> My Orders </a></li>
                        </ul>
                    </aside>
                    <aside class="col-6 col-sm-4 col-lg-2">
                        <h6 class="title">Download</h6>
                        <a href="#" class="mb-2 d-inline-block">
                            <img src="static/images/misc/btn-appstore.png" height="40" /></a>
                        <a href="#" class="mb-2 d-inline-block">
                            <img src="static/images/misc/btn-market.png" height="40" /></a>
                    </aside>
                </div>
                <!-- row.// -->
            </section>
            <!-- footer-top.// -->
            <hr class="my-0" />
            <section class="footer-bottom d-flex justify-content-between">
                <div class="text-white-50">Â© 2018- 2023 Templatemount.</div>
                <nav class="dropup">
                    <button class="dropdown-toggle btn text-white align-items-center" type="button"
                        data-bs-toggle="dropdown">
                        <img src="static/images/flags/flag-usa.png" class="me-2" height="20" />
                        <span>English</span>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li>
                            <a class="dropdown-item" href="#">Russian</a>
                        </li>
                        <li>
                            <a class="dropdown-item" href="#">Arabic</a>
                        </li>
                        <li>
                            <a class="dropdown-item" href="#">Spanish</a>
                        </li>
                    </ul>
                </nav>
            </section>
        </div>
        <!-- container end.// -->
    </footer>

    <!-- Bootstrap js -->
    <script src="static/js/bootstrap.bundle.min.js"></script>

    <!-- Custom js -->
    <script src="static/js/script.js"></script>

    <!-- autoComplete.js -->
{{/*    <script src="https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@10.2.7/dist/autoComplete.min.js"></script>*/}}

    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.3/dist/js/splide.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        // htmx.logAll();
        // htmx.config.defaultFocusScroll = false;
        function showHistoryAndTrending(event) {
            console.log(event)
            const target = event.target;
            const inputText = target.value.trim();

            const dropdown = document.getElementById('search-dropdown');
            if (inputText === '') {
                // If input is empty, show the dropdown and populate it with recent searches
                dropdown.classList.remove('visually-hidden');
                populateRecentSearches(dropdown);
            } else {
                // If input is not empty, hide the dropdown
                dropdown.classList.add('visually-hidden');
            }
        }

        function populateRecentSearches(container) {
            // Here, you can fetch recent searches from browser cache or any other source
            const recentSearches = ['recent search 1', 'recent search 2', 'recent search 3'];

            // Clear previous contents
            container.innerHTML = '';

            // Populate the container with recent searches
            const list = document.createElement('ul');
            list.classList.add('list-group', 'rounded-0');
            recentSearches.forEach(searchTerm => {
                const listItem = document.createElement('a');
                listItem.href = '#';
                listItem.classList.add('list-group-item', 'list-group-item-action', 'py-2');
                listItem.textContent = searchTerm;
                list.appendChild(listItem);
            });

            container.appendChild(list);
        }

        function storageAvailable(type) {
            let storage;
            try {
                storage = window[type];
                const x = "__storage_test__";
                storage.setItem(x, x);
                storage.removeItem(x);
                return true;
            } catch (e) {
                return (
                    e instanceof DOMException &&
                    // everything except Firefox
                    (e.code === 22 ||
                        // Firefox
                        e.code === 1014 ||
                        // test name field too, because code might not be present
                        // everything except Firefox
                        e.name === "QuotaExceededError" ||
                        // Firefox
                        e.name === "NS_ERROR_DOM_QUOTA_REACHED") &&
                    // acknowledge QuotaExceededError only if there's something already stored
                    storage &&
                    storage.length !== 0
                );
            }
        }


        function hasChanged(val) {
            const v = val.trim();
            if (!v){
                return false
            }
            if (storageAvailable("localStorage")){
                if (localStorage.getItem("lastQuery") === v) {
                    return false
                } else {
                    localStorage.setItem("lastQuery", v)
                    return  true
                }
            } else {
                if (sessionStorage.getItem("lastQuery") === v) {
                    return false
                } else {
                    sessionStorage.setItem("lastQuery", v)
                    return true
                }
            }
        }

        function hasSearchChanged(val) {
            const v = val.trim();
            if (!v){
                return false
            }
            if (storageAvailable("localStorage")){
                if (localStorage.getItem("lastSearchQuery") === v) {
                    return false
                } else {
                    localStorage.setItem("lastSearchQuery", v)
                    return  true
                }
            } else {
                if (sessionStorage.getItem("lastSearchQuery") === v) {
                    return false
                } else {
                    sessionStorage.setItem("lastSearchQuery", v)
                    return true
                }
            }
        }

        function isAutocomplete(event){
            console.log("fired")
            console.log(event.detail.autocomplete)
            return true
        }

        // autoCompleteJS setup
        // const autoCompleteJS = new autoComplete({
        //     selector: "#autoComplete",
        //     placeHolder: "Search for Food...",
        //     data: {
        //         src: async (query) => {
        //             try {
        //                 // Fetch Data from external Source
        //                 const source = await fetch(`http://localhost:8008/s?q=${query}`);
        //                 // Data should be an array of `Objects` or `Strings`
        //                 const data = await source.json();
        //
        //                 return data;
        //             } catch (error) {
        //                 return error;
        //             }
        //         },
        //         keys: ["products", "categories", "stores"],
        //         cache: true,
        //     },
        //     resultsList: {
        //         element: (list) => {
        //             const recentSearch = history.reverse();
        //             const historyLength = recentSearch.length;
        //
        //             // Check if there are recent searches
        //             if(historyLength) {
        //                 const historyBlock = document.createElement("div");
        //                 historyBlock.setAttribute("style", "display: flex; flex-direction: column; margin: .3rem; padding: .3rem .5rem;");
        //                 historyBlock.innerHTML = "Recent Searches";
        //                 // Limit displayed searched to only last "2"
        //                 recentSearch.slice(0, 2).forEach((item) => {
        //                     const recentItem = document.createElement("span");
        //                     recentItem.setAttribute("style", "display: flex; margin: .2rem; color: rgba(0, 0, 0, .2);");
        //                     recentItem.innerHTML = item;
        //                     historyBlock.append(recentItem);
        //                 });
        //
        //                 const separator = document.createElement("hr");
        //                 separator.setAttribute("style", "margin: 5px 0 0 0;");
        //                 historyBlock.append(separator);
        //
        //                 list.prepend(historyBlock);
        //             }
        //         }
        //     },
        //     resultItem: {
        //         highlight: true,
        //     },
        //     events: {
        //         input: {
        //             selection(event) {
        //                 const feedback = event.detail;
        //                 const input = autoCompleteJS.input;
        //                 // Get selected Value
        //                 const selection = feedback.selection.value.trim();
        //                 // Add selected value to "history" array
        //                 history.push(selection);
        //             }
        //         }
        //     },
        // });

        document.body.addEventListener('loadSplide', loadSplide)
        window.addEventListener('DOMContentLoaded', (evt) => {
            if (window.location.pathname.includes('/products/')) {
                const main = new Splide("#main-slider", {
                    type: 'loop',
                    height: 580,
                    cover: true,
                    pagination: false,
                    rewind: true
                });


                const vertical = new Splide("#vertical-slider", {
                    height: 580,
                    direction: "ttb",
                    isNavigation: true,
                    fixedHeight: 90,
                    gap        : 10,
                    rewind     : true,
                    pagination : false,
                    arrows: false,
                    wheel: true,

                });

                main.sync(vertical).mount();
                vertical.mount();
                console.log("splide loaded in normal mode")
            }
        })

        function loadSplide(evt) {
            const main = new Splide("#main-slider", {
                type: 'loop',
                height: 580,
                cover: true,
                pagination: false,
                rewind: true
            });


            const vertical = new Splide("#vertical-slider", {
                height: 580,
                direction: "ttb",
                isNavigation: true,
                fixedHeight: 90,
                gap        : 10,
                rewind     : true,
                pagination : false,
                arrows: false,
                wheel: true,
            });

            main.sync(vertical).mount();
            vertical.mount();
            console.log("splide loaded in htmx mode")

            // restoreScrollPosition(captureScrollPosition());
        }


        // custom htmx scripts
        function sendEmailCodeInput(event) {
            const emailBodeInput = event.target;
            let val = emailBodeInput.value;
            val = val.replace(/\D/g, "");
            if (val.length == 6) {
                htmx.trigger(emailBodeInput, "emailCodePost");
            }
        }

        function sendEmailCodePaste(event) {
            const emailBodeInput = event.target;
            let val = emailBodeInput.clipboardData.getData("text/plain");
            val = val.replace(/\D/g, "");
            if (val.length == 6) {
                htmx.trigger(emailBodeInput, "emailCodePost");
            }
        }

        function startTimer(duration, display, resendLink) {
            let timer = duration,
                minutes,
                seconds;
            const countdown = setInterval(function () {
                minutes = parseInt(timer / 60, 10);
                seconds = parseInt(timer % 60, 10);

                minutes = minutes < 10 ? "0" + minutes : minutes;
                seconds = seconds < 10 ? "0" + seconds : seconds;

                display.innerHTML = `<span>You can get a new code in <br> ${minutes}:${seconds} </span>`;

                if (--timer < 0) {
                    clearInterval(countdown);
                    display.style.display = "none"; // Hide the timer
                    resendLink.innerHTML = '<a href="#">Resend Code</a>'; // Show resend link
                    resendLink
                        .querySelector("a")
                        .addEventListener("click", function () {
                            // Logic to resend the code goes here
                            // You can replace this with your actual resend code functionality
                            alert("Resending code...");
                            // After resending, reset the timer and hide the resend link
                            display.style.display = "inline-block";
                            resendLink.innerHTML = "";
                            startTimer(durationInSeconds, display);
                        });
                }
            }, 1000);
        }

        document.body.addEventListener("startOTPTimer", function (event) {
            const timerDisplay = document.getElementById("timer");
            const resendLink = document.getElementById("resend-otp");
            startTimer(60, timerDisplay, resendLink);
        });

        // htmx related event listeners
        document.body.addEventListener("htmx:afterSwap", function (evt) {
            const t = evt.target;
            if (t.getAttribute("id") == "err-msg") {
                const p = t.parentElement;
                p.classList.remove("invisible");
                setTimeout(() => {
                    p.classList.add("invisible");
                }, 12000);
            }
        });

        document.body.addEventListener("htmx:configRequest", function(configEvent){
            console.log(configEvent)
            if (configEvent.detail.path === "/search") {
                console.log("1")
                configEvent.detail.parameters['autocomplete'] = configEvent.detail.triggeringEvent.type !== "search";
            }
        })

    </script>
    <script>
        // product details page functions
        function incrementValue(e) {
            e.preventDefault();
            var fieldName = $(e.target).data('field');
            var parent = $(e.target).closest('div');
            var currentVal = parseInt(parent.find('input[name=' + fieldName + ']').val(), 10);

            if (!isNaN(currentVal)) {
                parent.find('input[name=' + fieldName + ']').val(currentVal + 1);
            } else {
                parent.find('input[name=' + fieldName + ']').val(0);
            }
        }

        function decrementValue(e) {
            e.preventDefault();
            var fieldName = $(e.target).data('field');
            var parent = $(e.target).closest('div');
            var currentVal = parseInt(parent.find('input[name=' + fieldName + ']').val(), 10);

            if (!isNaN(currentVal) && currentVal > 0) {
                parent.find('input[name=' + fieldName + ']').val(currentVal - 1);
            } else {
                parent.find('input[name=' + fieldName + ']').val(0);
            }
        }

        $('.input-group').on('click', '.button-plus', function(e) {
            incrementValue(e);
        });

        $('.input-group').on('click', '.button-minus', function(e) {
            decrementValue(e);
        });
    </script>
</body>

</html>
{{ end }}